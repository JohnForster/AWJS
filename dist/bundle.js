!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var r=function(){function t(t){this.tileData=t.data.sprites}return t.prototype.render=function(t){if(t&&(this.map=t),!this.map)throw new Error("No map to render.");return!t&&this.mapCanvas?this.mapCanvas:this.draw(t)},t.prototype.loadMap=function(t){this.map=t},t.prototype.draw=function(t){var e=this,n=document.createElement("canvas"),r=n.getContext("2d");return this.map.data.forEach(function(t,n){t.forEach(function(t,o){var i=o*e.tileData[t].w,a=n*e.tileData[t].h;r.putImageData(e.tileData[t].imageData,i,a)})}),this.mapCanvas=n,n},t}(),o=function(){function t(t,e){this.spritesheetData=e,this.cursor=t}return t.prototype.render=function(){return this.cursor.position===this.lastCursorPosition?this.cursorCanvas:this.draw()},t.prototype.draw=function(){var t=document.createElement("canvas"),e=t.getContext("2d"),n=this.spritesheetData.data.sprites[0],r=this.cursor.getTopLeftPixelCoordinates(),o=r.x,i=r.y;return e.putImageData(n.imageData,o,i),this.cursorCanvas=t,t},t}(),i=function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(a,s)}u((r=r.apply(t,e||[])).next())})},a=function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},s=function(){function t(){}return t.load=function(e){return i(this,void 0,void 0,function(){var n,r;return a(this,function(o){switch(o.label){case 0:return[4,t.addImageProcess(e.path)];case 1:return n=o.sent(),r=t.getContext(n),e.data.sprites.forEach(function(e){e.imageData=t.getImageData(e,r)}),[2]}})})},t.getContext=function(e){var n=t.setupCanvas(e).getContext("2d");return n.drawImage(e,0,0),n},t.setupCanvas=function(t){var e=document.createElement("canvas");return e.width=t.width,e.height=t.height,e},t.addImageProcess=function(t){return new Promise(function(e,n){var r=new Image;r.onload=function(){return e(r)},r.onerror=function(t){return n(t)},r.src=t})},t.getImageData=function(t,e){var n=t.x,r=t.y,o=t.w,i=t.h;return e.getImageData(n,r,o,i)},t}(),u={path:"assets/spriteSheet.png",data:{type:"terrain",sprites:[{id:0,name:"grass",x:217,y:1567,w:16,h:16},{id:1,name:"sea",x:340,y:1567,w:16,h:16}]}},c={path:"assets/UISprites.png",data:{type:"UI",sprites:[{id:0,name:"cursor",x:44,y:6,w:28,h:31}]}},p=function(){function t(t){this.gameCanvas=this.setupMainCanvas(),this.gameContext=this.gameCanvas.getContext("2d"),s.load(u),s.load(c),this.bgRenderer=new r(u),this.uiRenderer=new o(t,c)}return t.prototype.loadMap=function(t){this.bgRenderer.loadMap(t)},t.prototype.render=function(){var t=this;console.log(this),this.getCanvases(this.bgRenderer).forEach(function(e){t.gameContext.drawImage(e,0,0)})},t.prototype.setupMainCanvas=function(){var t=document.getElementById("canvas");return t.height=600,t.width=800,t},t.prototype.getCanvases=function(t){return[this.bgRenderer.render()]},t}(),h=function(){function t(t){this.keyMappings={upCode:87,downCode:83,leftCode:65,rightCode:68},this.cursor=t,this.handleKeyPress=this.handleKeyPress.bind(this),document.onkeypress=document.onkeydown=this.handleKeyPress}return t.prototype.handleKeyPress=function(t){var e={};e[t.keyCode]="keydown"===t.type;var n=this.keyMappings,r=n.upCode,o=n.downCode,i=n.leftCode,a=n.rightCode;e[r]&&this.cursor.move("up"),e[o]&&this.cursor.move("down"),e[i]&&this.cursor.move("left"),e[a]&&this.cursor.move("right")},t}(),f=function(){function t(){this.position={x:0,y:0}}return t.prototype.setPosition=function(t,e){this.position.x=t,this.position.y=e},t.prototype.move=function(t){"up"===(t=t.toLowerCase())&&this.moveUp(),"down"===t&&this.moveDown(),"left"===t&&this.moveLeft(),"right"===t&&this.moveRight(),console.log(this.position)},t.prototype.moveUp=function(){this.position.y-=1},t.prototype.moveDown=function(){this.position.y+=1},t.prototype.moveLeft=function(){this.position.x-=1},t.prototype.moveRight=function(){this.position.x+=1},t.prototype.getTopLeftPixelCoordinates=function(){return{x:16*this.position.x-3,y:16*this.position.y-3}},t}(),d={data:[[0,0,0,1,1,0],[0,0,0,1,1,0],[0,0,1,1,1,0],[0,1,1,1,1,0],[0,0,0,1,1,0],[1,1,0,1,1,1]]},l=function(){function t(){this.cursor=new f,this.renderer=new p(this.cursor),this.controller=new h(this.cursor),this.renderer.loadMap(d)}return t.prototype.run=function(){var t=this;setInterval(function(){t.renderer.render()},2e3)},t}();(new(function(){function t(){}return t.prototype.run=function(){(new l).run()},t}())).run()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,