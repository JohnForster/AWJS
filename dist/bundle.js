!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var r=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function a(t){try{s(r.next(t))}catch(t){o(t)}}function u(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(a,u)}s((r=r.apply(t,e||[])).next())})},i=function(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},o=function(){function t(){this.ticksPerSecond=30,this.sprites=[],this.cursorTile={x:1,y:1},this.map=[[0,0,0,1,1,0],[0,0,0,1,1,0],[0,0,1,1,1,0],[0,1,1,1,1,0],[0,0,0,1,1,0],[1,1,0,1,1,1]],this.canvas=this.setupCanvas(),this.context=this.canvas.getContext("2d")}return t.prototype.setupCanvas=function(){var t=document.getElementById("canvas");return t.height=600,t.width=800,t},t.prototype.run=function(){return r(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return[4,this.loadSprites()];case 1:return t.sent(),this.gameTick(),[2]}})})},t.prototype.loadSprites=function(){return r(this,void 0,void 0,function(){var e,n;return i(this,function(r){switch(r.label){case 0:return[4,t.addImageProcess("assets/spriteSheet.png").then(function(t){return e=t})];case 1:return r.sent(),[4,t.addImageProcess("assets/UISprites.png").then(function(t){return n=t})];case 2:return r.sent(),this.sprites.push(t.getImageData(e,217,1567,16,16)),this.sprites.push(t.getImageData(e,340,1567,16,16)),this.sprites.push(t.getImageData(n,44,6,28,31)),[2]}})})},t.prototype.gameTick=function(){return r(this,void 0,void 0,function(){return i(this,function(t){return this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.printMap(this.map),this.printCursor(this.cursorTile,2),[2]})})},t.prototype.printMap=function(t){var e=this,n=document.createElement("canvas"),r=n.getContext("2d"),i={x:16,y:16};t.forEach(function(t,n){t.forEach(function(t,o){var a=o*i.x,u=n*i.y;r.putImageData(e.sprites[t],a,u)})});var o=this.getMapSize(t,i),a={x:Math.ceil((this.canvas.width-o.x)/2),y:20};this.context.drawImage(n,a.x,a.y)},t.prototype.getMapSize=function(t,e){return{x:t.length*e.x,y:t[0].length*e.y}},t.prototype.printCursor=function(t,e){var n=document.createElement("canvas"),r=n.getContext("2d");console.log(this.sprites),r.putImageData(this.sprites[e],0,0);var i=this.getMapSize(this.map,{x:16,y:16}),o=Math.ceil((this.canvas.width-i.x)/2),a=20,u=16*t.x+o-3,s=16*t.y+a-3;this.context.drawImage(n,u,s)},t.addImageProcess=function(t){return new Promise(function(e,n){var r=new Image;r.onload=function(){return e(r)},r.onerror=n,r.src=t})},t.getImageData=function(t,e,n,r,i){var o=document.createElement("canvas"),a=o.getContext("2d");return o.width=t.width,o.height=t.height,a.drawImage(t,0,0),a.getImageData(e,n,r,i)},t}();(new(function(){function t(){}return t.prototype.run=function(){(new o).run()},t}())).run()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,