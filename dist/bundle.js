!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);var r,o=function(){function t(t){this.canvas=document.createElement("canvas"),this.context=this.canvas.getContext("2d"),this.cachedCanvas=document.createElement("canvas"),this.sprites=t.data.sprites}return t.prototype.render=function(n){var e=this;return n?(this.context.clearRect(0,0,this.canvas.width,this.canvas.height),n.idGrid.forEach(function(t,r){t.forEach(function(t,o){if(void 0!==n.idGrid[r][o]){var i=e.sprites[t],u=16*o+(i.ax||0),a=16*r+(i.ay||0);e.context.putImageData(i.imageData,u,a)}})}),this.cachedCanvas=t.cloneCanvas(this.canvas),this.canvas):this.cachedCanvas},t.cloneCanvas=function(t){var n=document.createElement("canvas"),e=n.getContext("2d");return n.width=t.width,n.height=t.height,e.drawImage(t,0,0),n},t}(),i=(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),u=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n}(o),a=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),c=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n}(o),s=function(){function t(t,n,e){this.logicModel=t,this.uiModel=n,this.mainCanvas=this.setupMainCanvas(),this.mainContext=this.mainCanvas.getContext("2d"),this.bgRenderer=new u(e.terrain),this.uiRenderer=new c(e.ui)}return t.prototype.render=function(){var t=this.getGameState(),n=this.getUIState(),e=this.renderGame(t),r=this.renderUI(n);this.paintToMainCanvas(e,r)},t.prototype.paintToMainCanvas=function(){for(var t=this,n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];n.forEach(function(n){t.mainContext.drawImage(n,0,0)})},t.prototype.renderGame=function(t){return this.bgRenderer.render(t)},t.prototype.renderUI=function(t){return this.uiRenderer.render(t)},t.prototype.getGameState=function(){return this.logicModel.getState()},t.prototype.getUIState=function(){return this.uiModel.getState()},t.prototype.setupMainCanvas=function(){var t=document.getElementById("canvas");return t.height=600,t.width=800,t},t}(),f=function(){function t(t){this.keyMappings={w:"up",s:"down",a:"left",d:"right"," ":"select"},this.uiModel=t,document.onkeypress=this.handleKeyPress.bind(this)}return t.prototype.handleKeyPress=function(t){var n=this.keyMappings[t.key.toLowerCase()];n&&this.uiModel.send(n)},t}(),p=function(){function t(t,n,e){for(var r=[],o=3;o<arguments.length;o++)r[o-3]=arguments[o];this.instructions={up:function(){},down:function(){},left:function(){},right:function(){},A:function(){},B:function(){},L:function(){},R:function(){},start:function(){},select:function(){}},this.position={x:t,y:n,z:e},this.init(r)}return t.prototype.init=function(t){},t.prototype.sendInstruction=function(t){this.instructions[t]()},t}(),h=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),l=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.name="cursor",n.id=0,n.instructions={up:function(){n.moveUp()},down:function(){n.moveDown()},left:function(){n.moveLeft()},right:function(){n.moveRight()}},n}return h(n,t),n.prototype.moveUp=function(t){void 0===t&&(t=1),this.position.y>0&&(this.position.y-=t)},n.prototype.moveDown=function(t){void 0===t&&(t=1),this.position.y+=t},n.prototype.moveLeft=function(t){void 0===t&&(t=1),this.position.x>0&&(this.position.x-=t)},n.prototype.moveRight=function(t){void 0===t&&(t=1),this.position.x+=t},n}(p),d=function(){function t(t){this.currentUIState={idGrid:Array.from(Array(32),function(t){return Array(32)})},this.objects=[],console.log(this.currentUIState),this.gameState=t.getState(),this.cursor=this.create(l,{x:0,y:0,z:0}),this.select(this.cursor),this.refreshState()}return t.prototype.send=function(t){this.selectedObject.sendInstruction(t);var n=this.selectedObject.position,e=n.x,r=n.y;this.refreshState(),this.currentUIState.idGrid[r][e]=this.selectedObject.id},t.prototype.create=function(t,n,e){var r=new t(n.x,n.y,n.z);return e&&e(r),this.objects.push(r),r},t.prototype.refreshState=function(){var t=this;this.currentUIState.idGrid=Array.from(Array(32),function(t){return Array(32)}),this.objects=this.objects.sort(function(t,n){return t.position.z-n.position.z}),this.objects.forEach(function(n){var e=n.position,r=e.x,o=e.y;t.currentUIState.idGrid[o][r]=n.id})},t.prototype.getState=function(){return this.currentUIState},t.prototype.select=function(t){this.selectedObject=t||this.cursor},t}(),y=function(){function t(){}return t.prototype.getState=function(){},t}(),v=function(){function t(){this.logicModel=new y}return t.prototype.getState=function(){return{idGrid:[[1,1,0,1,0,1],[1,1,0,1,0,1],[1,1,0,1,0,1],[1,1,0,1,0,1],[1,1,0,1,0,1],[1,1,0,1,0,1]]}},t}(),g=function(t,n,e,r){return new(e||(e=Promise))(function(o,i){function u(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new e(function(n){n(t.value)}).then(u,a)}c((r=r.apply(t,n||[])).next())})},m=function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},w=function(){function t(){}return t.load=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return g(this,void 0,void 0,function(){var e=this;return m(this,function(r){return n.forEach(function(n){return g(e,void 0,void 0,function(){var e,r,o,i;return m(this,function(u){switch(u.label){case 0:return[4,t.addImageProcess(n.path)];case 1:for(o in e=u.sent(),r=t.getContext(e),n.data.sprites)(i=n.data.sprites[o]).imageData=t.getImageData(i,r);return[2]}})})}),[2]})})},t.getContext=function(n){var e=t.setupCanvas(n).getContext("2d");return e.drawImage(n,0,0),e},t.setupCanvas=function(t){var n=document.createElement("canvas");return n.width=t.width,n.height=t.height,n},t.addImageProcess=function(t){return new Promise(function(n,e){var r=new Image;r.onload=function(){return n(r)},r.onerror=function(t){return e(t)},r.src=t})},t.getImageData=function(t,n){var e=t.x,r=t.y,o=t.w,i=t.h;return n.getImageData(e,r,o,i)},t}(),b={path:"assets/terrain/spriteSheet.png",data:{type:"terrain",sprites:{0:{name:"grass",x:217,y:1567,w:16,h:16},1:{name:"sea",x:340,y:1567,w:16,h:16}}}},x={path:"assets/ui/UISprites.png",data:{type:"UI",sprites:{0:{name:"cursor",x:44,y:6,w:28,h:31,ax:-3,ay:-3}}}},S=function(t,n,e,r){return new(e||(e=Promise))(function(o,i){function u(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new e(function(n){n(t.value)}).then(u,a)}c((r=r.apply(t,n||[])).next())})},_=function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},I=function(){function t(){this.logicModel=new v,this.uiModel=new d(this.logicModel),this.view=new s(this.logicModel,this.uiModel,{terrain:b,ui:x}),this.controller=new f(this.uiModel),this.performAsyncSetup()}return t.prototype.performAsyncSetup=function(){return S(this,void 0,void 0,function(){return _(this,function(t){switch(t.label){case 0:return[4,Promise.all([w.load(b,x)])];case 1:return t.sent(),this.runGame(),[2]}})})},t.prototype.runGame=function(){var t=this;setInterval(function(){t.view.render()},1e3/30)},t}();(new(function(){function t(){}return t.prototype.run=function(){new I},t}())).run()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,