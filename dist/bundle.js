!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);var r,o,i,a,u=function(){function t(t){this.canvas=this.setupCanvas(),this.context=this.canvas.getContext("2d"),this.cachedCanvas=document.createElement("canvas"),this.sprites=t.data.sprites}return t.prototype.render=function(n){var e=this;return n?(this.context.clearRect(0,0,this.canvas.width,this.canvas.height),n.elements.forEach(function(t){var n=e.sprites[t.id],r=16*t.x+(n.ax||0),o=16*t.y+(n.ay||0);e.context.putImageData(n.imageData,r+8,o+8)}),this.cachedCanvas=t.cloneCanvas(this.canvas),this.canvas):this.cachedCanvas},t.cloneCanvas=function(t){var n=document.createElement("canvas"),e=n.getContext("2d");return n.width=t.width,n.height=t.height,e.drawImage(t,0,0),n},t.prototype.setupCanvas=function(){var t=document.createElement("canvas");return t.height=600,t.width=800,t},t}(),c=(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),s=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return c(n,t),n}(u),f=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),p=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return f(n,t),n}(u),h=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),l=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return h(n,t),n}(u),d=function(){function t(){}return t.getTerrainScreenObjects=function(t){var n=[];return t.terrain.mapIdGrid.forEach(function(t,e){t.forEach(function(t,r){n.push({id:t,x:r,y:e,z:0})})}),{elements:n}},t.getUnitsScreenObjects=function(t){var n=[];return t.terrain.mapIdGrid.forEach(function(t,e){t.forEach(function(t,r){n.push({id:t,x:r,y:e,z:0})})}),{elements:n}},t}(),y=function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),a=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return a},v=function(){function t(t,n,e){this.logicModel=t,this.uiModel=n,this.mainCanvas=this.setupMainCanvas(),this.mainContext=this.mainCanvas.getContext("2d"),this.bgRenderer=new s(e.terrain),this.uiRenderer=new p(e.ui),this.unitRenderer=new l(e.units)}return t.prototype.render=function(){var t=this.getGameState(),n=d.getTerrainScreenObjects(t),e=d.getUnitsScreenObjects(t),r=y(this.renderGame(n,e),2),o=r[0],i=r[1],a=this.getUIState(),u=this.renderUI(a);this.paintToMainCanvas(o,i,u)},t.prototype.paintToMainCanvas=function(){for(var t=this,n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];this.mainContext.clearRect(0,0,this.mainCanvas.width,this.mainCanvas.height),n.forEach(function(n){t.mainContext.drawImage(n,0,0)})},t.prototype.renderGame=function(t,n){return[this.bgRenderer.render(t),this.unitRenderer.render(n)]},t.prototype.renderUI=function(t){return this.uiRenderer.render(t)},t.prototype.getGameState=function(){return this.logicModel.getState()},t.prototype.getUIState=function(){return this.uiModel.getState()},t.prototype.setupMainCanvas=function(){var t=document.getElementById("canvas");return t.height=600,t.width=800,t},t}(),m=function(){function t(t){this.keyMappings={w:"up",s:"down",a:"left",d:"right"," ":"A"},this.uiModel=t,document.onkeypress=this.handleKeyPress.bind(this)}return t.prototype.handleKeyPress=function(t){var n=this.keyMappings[t.key.toLowerCase()];n&&this.uiModel.send(n)},t}(),g=function(){function t(t,n,e){for(var r=[],o=3;o<arguments.length;o++)r[o-3]=arguments[o];this.instructions={up:function(){},down:function(){},left:function(){},right:function(){},A:function(){},B:function(){},L:function(){},R:function(){},start:function(){},select:function(){}},this.position={x:t,y:n,z:e},this.init(r)}return t.prototype.init=function(t){},t.prototype.sendInstruction=function(t){this.instructions[t]()},t}(),w=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),b=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.name="cursor",n.id=0,n.instructions={up:function(){n.moveUp()},down:function(){n.moveDown()},left:function(){n.moveLeft()},right:function(){n.moveRight()},A:function(){},B:function(){},L:function(){},R:function(){},start:function(){},select:function(){}},n}return w(n,t),n.prototype.moveUp=function(t){void 0===t&&(t=1),this.position.y>0&&(this.position.y-=t)},n.prototype.moveDown=function(t){void 0===t&&(t=1),this.position.y+=t},n.prototype.moveLeft=function(t){void 0===t&&(t=1),this.position.x>0&&(this.position.x-=t)},n.prototype.moveRight=function(t){void 0===t&&(t=1),this.position.x+=t},n}(g),x=function(){return(x=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)},_=function(){function t(t){this.objects=[],console.log(this.currentUIState),this.gameState=t.getState(),this.cursor=this.create(b,{x:0,y:0,z:0}),this.select(this.cursor),this.refreshState()}return t.prototype.send=function(t){this.selectedObject.sendInstruction(t);var n=this.selectedObject.position;n.x,n.y;this.refreshState()},t.prototype.create=function(t,n,e){var r=new t(n.x,n.y,n.z);return e&&e(r),this.objects.push(r),r},t.prototype.refreshState=function(){var t=this;this.currentUIState.elements=[],this.objects=this.objects.sort(function(t,n){return t.position.z-n.position.z}),this.objects.forEach(function(n){var e=n.position,r=n.id;t.currentUIState.elements.push(x({id:r},e))})},t.prototype.getState=function(){return this.currentUIState},t.prototype.select=function(t){this.selectedObject=t||this.cursor},t}(),S=function(){function t(){}return t.prototype.getState=function(){},t}(),O=function(){return function(){}}(),j=function(){function t(t,n,e,r){this.loadedUnits=[],this.hidden=!1,this.type=t,this.playerId=n,this.gridPosX=e,this.gridPosY=r,this.currentHealth=t.totalHealth,this.currentFuel=t.maxFuel,this.currentAmmo=t.maxAmmo}return t.prototype.destroy=function(){this.gridPosX=this.gridPosY=this.currentAmmo=this.currentFuel=this.currentHealth=-1},t.prototype.damage=function(t){this.currentHealth-=t,this.currentHealth<0&&this.destroy()},t}();!function(t){t[t.infantary=0]="infantary",t[t.vehicle=1]="vehicle",t[t.helicopter=2]="helicopter",t[t.plane=3]="plane",t[t.ship=4]="ship",t[t.submarine=5]="submarine"}(o||(o={})),function(t){t[t.direct=0]="direct",t[t.indirect=1]="indirect"}(i||(i={})),function(t){t[t.capture=0]="capture",t[t.dive=1]="dive",t[t.load=2]="load",t[t.supply=3]="supply",t[t.unload=4]="unload",t[t.join=5]="join"}(a||(a={}));var I={id:4,name:"tank",cost:5e3,totalHealth:100,type:o.vehicle,visionRange:3,movementRange:5,maxFuel:80,maxAmmo:8,weapons:{primary:{name:"cannon",type:i.direct,baseDamage:70,efficacy:{infantary:1,vehicle:1,helicopter:1,plane:1,ship:1,submarine:1}}},abilities:[]},C=new O,P=function(){function t(){this.logicModel=new S}return t.prototype.getState=function(){return{gameID:1,numberOfPlayers:1,players:[{id:0,player:C,money:1e3,color:"orange"}],terrain:{sizeX:5,sizeY:5,mapIdGrid:[[0,0,1,0,0],[0,1,1,1,0],[1,1,1,1,1],[0,1,1,1,0],[0,0,1,0,0]]},units:[new j(I,0,2,2),new j(I,0,2,3),new j(I,0,4,2),new j(I,0,1,1)]}},t}(),M=function(t,n,e,r){return new(e||(e=Promise))(function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new e(function(n){n(t.value)}).then(a,u)}c((r=r.apply(t,n||[])).next())})},E=function(t,n){var e,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(t,a)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},U=function(){function t(){}return t.load=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return M(this,void 0,void 0,function(){var e=this;return E(this,function(r){return n.forEach(function(n){return M(e,void 0,void 0,function(){var e,r,o,i;return E(this,function(a){switch(a.label){case 0:return[4,t.addImageProcess(n.path)];case 1:for(o in e=a.sent(),r=t.getContext(e),n.data.sprites)(i=n.data.sprites[o]).imageData=t.getImageData(i,r);return[2]}})})}),[2]})})},t.getContext=function(n){var e=t.setupCanvas(n).getContext("2d");return e.drawImage(n,0,0),e},t.setupCanvas=function(t){var n=document.createElement("canvas");return n.width=t.width,n.height=t.height,n},t.addImageProcess=function(t){return new Promise(function(n,e){var r=new Image;r.onload=function(){return n(r)},r.onerror=function(t){return e(t)},r.src=t})},t.getImageData=function(t,n){var e=t.x,r=t.y,o=t.w,i=t.h;return n.getImageData(e,r,o,i)},t}(),k={path:"assets/terrain/spriteSheet.png",data:{type:"terrain",sprites:{0:{name:"sea",x:340,y:1567,w:16,h:16},1:{name:"grass",x:217,y:1567,w:16,h:16}}}},R={path:"assets/ui/UISprites.png",data:{type:"UI",sprites:{0:{name:"cursor",x:44,y:6,w:28,h:31,ax:-3,ay:-3}}}},A={path:"assets/units/unitSprites.png",data:{type:"units",sprites:{0:{name:"infantary_orange",x:24,y:4,w:14,h:15,ax:0,ay:1},4:{name:"tank_orange",x:96,y:6,w:13,h:13,ax:2,ay:1}}}},G=function(t,n,e,r){return new(e||(e=Promise))(function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new e(function(n){n(t.value)}).then(a,u)}c((r=r.apply(t,n||[])).next())})},D=function(t,n){var e,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(t,a)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},z=function(){function t(){this.logicModel=new P,this.uiModel=new _(this.logicModel),this.view=new v(this.logicModel,this.uiModel,{terrain:k,ui:R,units:A}),this.controller=new m(this.uiModel),this.performAsyncSetup()}return t.prototype.performAsyncSetup=function(){return G(this,void 0,void 0,function(){return D(this,function(t){switch(t.label){case 0:return[4,Promise.all([U.load(k,R,A)])];case 1:return t.sent(),this.runGame(),[2]}})})},t.prototype.runGame=function(){var t=this;setInterval(function(){t.view.render()},1e3/30)},t}();(new(function(){function t(){}return t.prototype.run=function(){new z},t}())).run()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,